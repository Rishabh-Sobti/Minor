name: "VGG-CNN-S"

layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror: false
    crop_size: 640
  }
  image_data_param {
    source: "your-train-list.txt"
    root_folder: "data/"
    batch_size: 32
  }
}

layer {
  name: "data"
  type: "ImageData"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  transform_param {
    mirror: false
    crop_size: 640
  }
  image_data_param {
    source: "your-val-list.txt"
    root_folder: "data/"
    batch_size: 32
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }   
    bias_filler {
      type: "constant"
      value: 0
    }   
  }
}

layer {
  bottom: "conv1"
  top: "conv1"
  name: "relu1"
  type: "ReLU"
}
layer {
  bottom: "conv1"
  top: "norm1"
  name: "norm1"
  type: "LRN"
  lrn_param {
    local_size: 5
    alpha: 0.0005
    beta: 0.75
    k: 2
  }
}
layer {
  bottom: "norm1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 3
  }
}

layer {
  name: "conv2"
  type: "Convolution"
  bottom: "pool1"
  top: "conv2"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }   
    bias_filler {
      type: "constant"
      value: 0
    }   
  }
}

layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
layer {
  bottom: "conv2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}

layer {
  name: "conv3"
  type: "Convolution"
  bottom: "pool2"
  top: "conv3"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }   
    bias_filler {
      type: "constant"
      value: 0
    }   
  }
}

layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}

layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }   
    bias_filler {
      type: "constant"
      value: 0
    }   
  }
}

layer {
  bottom: "conv4"
  top: "conv4"
  name: "relu4"
  type: "ReLU"
}

layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
    lr_mult: 0
    decay_mult: 1
  }
  param {
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    stride: 1
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }   
    bias_filler {
      type: "constant"
      value: 0
    }   
  }
}

layer {
  bottom: "conv5"
  top: "conv5"
  name: "relu5"
  type: "ReLU"
}
layer {
  bottom: "conv5"
  top: "pool5"
  name: "pool5"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 3
  }
}

layer {
  name: "fc6_n"
  type: "InnerProduct"
  bottom: "pool5"
  top: "fc6_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }   
    bias_filler {
      type: "constant"
      value: 1
    }   
  }
}

layer {
  bottom: "fc6_n"
  top: "fc6_n"
  name: "relu6_n"
  type: "ReLU"
}
layer {
  bottom: "fc6_n"
  top: "fc6_n"
  name: "drop6_n"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}


layer {
  name: "fc7_n"
  type: "InnerProduct"
  bottom: "fc6_n"
  top: "fc7_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 4096
    weight_filler {
      type: "gaussian"
      std: 0.005
    }   
    bias_filler {
      type: "constant"
      value: 1
    }   
  }
}

layer {
  bottom: "fc7_n"
  top: "fc7_n"
  name: "relu7_n"
  type: "ReLU"
}
layer {
  bottom: "fc7_n"
  top: "fc7_n"
  name: "drop7_n"
  type: "Dropout"
  dropout_param {
    dropout_ratio: 0.5
  }
}

layer {
  name: "fc8_n"
  type: "InnerProduct"
  bottom: "fc7_n"
  top: "fc8_n"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 5
    weight_filler {
      type: "gaussian"
      std: 0.005
    }   
    bias_filler {
      type: "constant"
      value: 1
    }   
  }
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc8_n"
  bottom: "label"
  top: "accuracy"
  accuracy_param {
    top_k: 5
  }
  include {
    phase: TEST
  }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8_n"
  bottom: "label"
  top: "loss"
}
